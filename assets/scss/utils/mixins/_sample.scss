// Retinize
@mixin retinize($path,$file,$type,$width,$height){
    background-image:url($path + '/' + $file + '.' + $type);
    @media (max-width:$screen-sm) {
        & {
            background-image:url($path + '/' + $file + '_x2.' + $type);
            -wekit-background-size:$width $height;
            background-size:$width $height;
        }
    }
}

@mixin breakpoint($point) {
    @if $point == desktop {
        @media screen and(min-width: $screen-lg)  {
            @content;
        }
    }
    @else if $point == tablet {
        @media screen and(max-width: $screen-lg - 1) {
            @content;
        }
    }
    @else if $point == mobile {
        @media screen and(max-width: $screen-sm) {
            @content;
        }
    }
}

@mixin respond-above($mq) {
    @media (min-width: $mq) {
        @content;
    }
}

@mixin respond-between($mq-min, $mq-max) {
    @media (min-width: $mq-min) and (max-width: $mq-max) {
        @content;
    }
}

@mixin respond-below($mq) {
    @media (max-width: $mq) {
        @content;
    }
}

@mixin clearfix {
    &:before,
    &:after {
        content: '';
        display: block;
        clear: both;
    }
}

// direction mixin
@mixin float($dir) {
    @if $dir == left {
        float: $def-float;
    } @else if $dir == right {
        float: $opp-float;
    } @else {
        float: $dir;
    }
}

@mixin text-align($dir) {
    @if $dir == left {
        text-align: $def-float;
    } @else if $dir == right {
        text-align: $opp-float;
    } @else {
        text-align: $dir;
    }
}

@mixin padding-left($unit) {
    padding-#{$def-float}: $unit;
}

@mixin padding-right($unit) {
    padding-#{$opp-float}: $unit;
}

@mixin margin-left($unit) {
    padding-#{$def-float}: $unit;
}

@mixin margin-right($unit) {
    padding-#{$opp-float}: $unit;
}


/// Block Element
/// @access public
/// @param {String} $element - Element's name
@mixin element($element) {
    &__#{$element} {
        @content;
    }
}

/// Block Modifier
/// @access public
/// @param {String} $modifier - Modifier's name
@mixin modifier($modifier) {
    &--#{$modifier} {
        @content;
    }
}

@mixin ele($element) {
    @include element($element) {
        @content;
    }
}

@mixin mod($modifier) {
    @include modifier($modifier) {
        @content;
    }
}

/// @alias element
@mixin e($element) {
    @include element($element) {
        @content;
    }
}

/// @alias modifier
@mixin m($modifier) {
    @include modifier($modifier) {
        @content;
    }
}

@mixin create-ele($component-name, $node-name) {
    .#{$component-name}__#{$node-name} {
        @content;
    }
}


// browser
@mixin ie-only {
    @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
        @content;
    }

    @media screen and (min-width: 0\0) {
        @content;
    }
}

@mixin firefox-only() {
    @-moz-document url-prefix() {
        @content;
    }
}

@mixin make-divider-lg($color: $color7, $height: 100%) {
    @include lg{
        &::after {
            content:'';
            position: absolute;
            right: -($gutter-px-lg/2);
            top: 0;
            display: block;
            height: $height;
            border-left: 1px solid $color;
            width: 0;
        }
    }
}

// =============================================================================
// String Replace
// =============================================================================

@function str-replace($string, $search, $replace: "") {
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}



// =============================================================================
// Font Face
// =============================================================================

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg, $svg-ext: null) {
    $src: null;
    @if $svg-ext == null {
        $svg-ext: "#" + str-replace($name, " ", "-") !global;
    }
    $extmods: (
            eot: "?",
            svg: $svg-ext,
    );

    $formats: (
            otf: "opentype",
            ttf: "truetype"
    );

    @each $ext in $exts {
        $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
        $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
        $src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
    }

    @font-face {
        font-family: quote($name);
        font-style: $style;
        font-weight: $weight;
        src: $src;
    }
}