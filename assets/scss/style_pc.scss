@charset "utf-8";
// page style
//@import "globalvars/global_variables";
$selector: "thisSelect";
@import "utils/mixins/BEM";
@import "utils/mixins/media-queries";

$component:'test-compoent';


@include b($component) {
    background: red;

        @include e(header){
            font-size: 14px;

            @include m(css) {
                font-size: 18px;
            }
        };
}

@function makeRetinaImgStr($img){
    $start: str-index($img, '.')-1;
    $file: (str_slice($img, 0, $start)) + '2x';
    $ext: str_slice($img, $start+1);
    @return $file+$ext;
}

@mixin df($arg1, $arg2:null){
    //@debug str_slice($args, -1);
    content: type_of($arg1);
    @if(type_of($arg1) == map){
        @each$key, $value in $arg1{
            @if($key == bg){
                background:url($value) no-repeat;
            }@else if($key == bg2x){
                background:url($value) no-repeat;
                background:url(makeRetinaImgStr($value)) no-repeat;
            }@else if($key == icon){
                content:'아이콘 클래스 생성';
            }@else{
                #{$key}:$value + px;
            }
        }
    }@else{
        #{$arg1}:$arg2 + px;
    }

}

@mixin mq_j($screen){

    @if($screen == mobile){
        @media screen and (min-width:767px){
            @content;
            content:'시작';
            color:if($screen == mobile, red, green);
        }
    }@else if($screen == tablet){
        @media screen and (min-width:1280px){
            @content;
        }
    }@else if($screen == pc){
        @content;
        //
    }


}

@include mq_j(pc){
    .body{
        content:'웹 스타일';
        $screen: orange;


        @include mq_j(tablet){
            content:'타블릿 스타일';
        }

        @include mq_j(mobile){
            content:'모바일 스타일';
        }
    }
}

//sass magic media query

@include screen(320px, 640px) {
    .sass-magics{
        color:green;
    }

}
//컴포넌트명을 중심으로 모든것을 정의
 $sampleDir: 'sample-directory'; // 이미지 폴더와 매칭되도록

//다중 arguments 처리 ...사용
@mixin box-shadow( $args... ) {
    -webkit-box-shadow: $args;
    -moz-box-shadow: $args;
    box-shadow: $args;
}

.box-double-shadow {
    @include box-shadow(2px 6px 10px #999, 0px 4px 5px #666, 2px 5px 5px #fff);
}


.test{
   @include df((font-size:10, top:20, left:40, bg:'background-image.jpg', bg2x:'background-retina.jpg', icon:'icon-image.png'));
    ///  *** 믹스인 요구 사항 ***
    // 공통: 수치를 변환(반흥형 단위,  vw & px)
    // 미디어 쿼리(pc Max정의)
    // 백그라운드 속성 처리
    // 아이콘 생성 (svg, png fallback처리)
    // 폰트 속성 처리
    // ltr, rtl방향 설정

    @include df(font-size,23);
    content:counter(1,23,'4빛',5);
}

@function text-contrast($bg-color, $val: 70%) {

    // 변수 $value 초기 값 설정 null
    $value: null;

    // 전달인자 값을 확인 (유효성 검사)
    @if (type-of($bg-color) != color) {
        @warn "첫번째 전달인자 값은 컬러 값이어야 합니다. 예) #fff, red, rgba()";
        @debug "사용자가 전달한 값은 #{$bg-color}입니다.";
    }
    @if (lightness($bg-color) > 50%) {
        $value: darken($bg-color, $val)
    }
    @else {
        $value: lighten($bg-color, $val)
    }
    // 함수는 반드시 return 값이 필요하다
    @return $value
}

//  Photoshop 자간 간격 설정
@function lt_Spacing($spacing) {
    @if (type-of($spacing) !=number) {
        @warn "전달한 인자 값은 #{$spacing}입니다 제대로 된 값(숫자)을 전달해주세요."
    }
    @return deUnit($spacing) / 1000+em
}

// 단위 제거 함수
@function deUnit($value) {
    @return ($value / ($value * 0 + 1))
}

.demo-01 {
    background-color: text-contrast(#c4c4c4, 50%)
}

.demo-02 {
    letter-spacing: lt_Spacing(10);
}




